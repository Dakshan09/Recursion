import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

// Java implementation of iterative Binary Search
class BinarySearch {
    int binarySearch(int[] arr,int item,int s,int e){
        if(s>e){
            return -1;
        }
        int m = s + (e-s) / 2;
        if(arr[m]==item){
            return m;
        }
        if (item<arr[m]){
         return  binarySearch(arr,item,s,m-1);
        }
        return binarySearch(arr,item,m+1,e);
    }
    public static void main(String args[])
    {
        int arr[] = {10,20,30,40,50,60};
        BinarySearch ob = new BinarySearch();
        Scanner Input = new Scanner(System.in);
        System.out.println("Enter the number:");
        int item = Input.nextInt();
        int result = ob.binarySearch(arr, item, 0, arr.length-1);
        System.out.println(result);
    }
}

//quick sort
// Java program for implementation of QuickSort
class QuickSort{
    public static void main(String[] args) {
        int[] arr = {4,5,6,7,9,3,2,1,8,0};
        sort(arr,0,arr.length-1);
        System.out.println(Arrays.toString(arr));

    }
    static void sort(int[] nums,int low,int high){
        if (low>high) {
            return;
        }
        int i = low;
        int j = high;
        int mid = i + (j-i)/2; //????
        int pivot = nums[mid];

        while (i<= j) {

            while(nums[i]<pivot){
                i++;
            }

            while(nums[j]>pivot){
                j--;
            }

        if(i<=j) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;
            j--;
        }

        }
        sort(nums,low,j);
        sort(nums,i,high);
    }
}

// Maze Problem

class maze{
    public static void main(String[] args) {
//          path(" ",3,3);
//          System.out.println(Pathret("",3,3));
          int[][] maze = { {0, 0, 0}, {0, 1, 0}, {0, 0,0} };
          pathRestriction("",maze,0,0);
    }static int count(int r, int c) {
        if (r == 1 || c == 1) {
            return 1;
        }
        int right = count(r, c-1 );
        int down = count(r-1, c);
        return right+down;
    }
    static void path(String p,int r,int c){
        if (r==1 && c==1){
            System.out.println(p);
            return;
        }
        if(r>1){
            path(p+'D',r-1,c);
        }
        if (c>1){
            path(p+'R',r,c-1);
        }
    }
    static ArrayList<String> Pathret(String p, int r, int c){
        if (r==1 && c==1){
            ArrayList<String> list = new ArrayList<>();
            list.add(p);
            return list;
        }
        ArrayList<String> list = new ArrayList<>();
        if(r>1){
          list.addAll(Pathret(p+'D',r-1,c));
        }
        if (c>1){
            list.addAll(Pathret(p+'R',r,c-1));
        }
        if (r>1 && c>1){
            list.addAll(Pathret(p+'C',r-1,c-1));
        }
        return list;
    }
    static void pathRestriction(String p,int [][] maze,int r,int c){
        if (r == maze.length-1 && c == maze[0].length-1){
            System.out.println(p);
            return;
        }
        if(maze[r][c] == 1){
            return;
        }
        if(r < maze.length-1 ){
            pathRestriction(p+'D',maze,r+1,c);
        }
        if (c < maze[0].length-1){
            pathRestriction(p+'R',maze,r,c+1);
        }
        return;
    }
}



